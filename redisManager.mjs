import Redis from "ioredis";
import {
  executeRedisPipeline,
  createDeviceDataBatch,
  filterExpiredDevices,
  CONSTANTS,
  getPortnumName,
} from "./utils.mjs";

const { MAX_METADATA_ITEMS_COUNT, DEVICE_EXPIRY_TIME, MAX_PORTNUM_MESSAGES } =
  CONSTANTS;

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Redis Manager —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 *
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞ dots:${deviceId}:
 * - longName - –î–ª–∏–Ω–Ω–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è)
 * - shortName - –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è)
 * - longitude - –î–æ–ª–≥–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è)
 * - latitude - –®–∏—Ä–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è)
 * - s_time - –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 * - mqtt - –§–ª–∞–≥ MQTT (1 - MQTT gateway)
 *
 * –ü—Ä–∞–≤–∏–ª–æ: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∏–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ª–∏–±–æ –∏–º—è. –ü–∞–∫–µ—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Ä–∞–∑–¥–µ–ª—å–Ω–æ.
 * –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –∏–º–µ–Ω–∏ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ dots:.
 */
export class RedisManager {
  constructor(config) {
    this.redis = new Redis(config);
    this.cache = new Map();
    this.cacheTimestamps = new Map();
    this.cacheTTL = 15000; // 15 —Å–µ–∫—É–Ω–¥
    this.isQuerying = false;
    this.queryLock = new Map();

    this.setupEventHandlers();
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Redis
   */
  setupEventHandlers() {
    this.redis.on("error", (err) => {
      console.error("Redis Client Error:", err);
    });

    this.redis.on("connect", () => {
      console.log("‚úÖ Connected to Redis");
    });

    this.redis.on("reconnecting", () => {
      console.log("üîÑ Reconnecting to Redis...");
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
   */
  async ping() {
    return await this.redis.ping();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ portnum
   * @param {number|string} portnum - –ù–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param {Object} messageData - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async savePortnumMessage(portnum, deviceId, messageData) {
    try {
      const portnumName = getPortnumName(portnum);
      if (!portnumName) {
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π portnum: ${portnum}`);
        return;
      }

      const key = `${portnumName}:${deviceId}`;
      const messageWithTimestamp = {
        timestamp: Date.now(),
        ...messageData,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
      await this.redis.rpush(key, JSON.stringify(messageWithTimestamp));

      // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö MAX_PORTNUM_MESSAGES —Å–æ–æ–±—â–µ–Ω–∏–π
      await this.redis.ltrim(key, -MAX_PORTNUM_MESSAGES, -1);

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
      this.invalidatePortnumCache(portnumName, deviceId);

      // console.log(
      //   `üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${key}: ${JSON.stringify(messageData).substring(
      //    0,
      //    200
      //   )}...`
      // );
    } catch (error) {
      console.error("Error saving portnum message:", error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ portnum –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param {string} portnumName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ça
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param {number} limit - –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async getPortnumMessages(
    portnumName,
    deviceId,
    limit = MAX_PORTNUM_MESSAGES
  ) {
    const cacheKey = `portnum_${portnumName}_${deviceId}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.isCacheValid(cacheKey)) {
      return this.cache.get(cacheKey);
    }

    try {
      const key = `${portnumName}:${deviceId}`;
      const data = await this.redis.lrange(key, -limit, -1);

      const result = data
        .map((item) => {
          try {
            return JSON.parse(item);
          } catch {
            return null;
          }
        })
        .filter(Boolean)
        .reverse(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.cache.set(cacheKey, result);
      this.cacheTimestamps.set(cacheKey, Date.now());

      return result;
    } catch (error) {
      console.error(
        `Error getting portnum messages for ${portnumName}:${deviceId}:`,
        error.message
      );
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   * @param {string} portnumName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ça
   * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
   */
  async getAllPortnumMessages(portnumName) {
    try {
      const pattern = `${portnumName}:*`;
      const keys = await this.redis.keys(pattern);

      if (keys.length === 0) {
        return {};
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const operations = keys.map((key) => ({
        command: "lrange",
        args: [key, -MAX_PORTNUM_MESSAGES, -1],
      }));

      const results = await executeRedisPipeline(this.redis, operations);

      const allMessages = {};
      keys.forEach((key, index) => {
        const deviceId = key.split(":")[1];
        const messages = results[index]
          .map((item) => {
            try {
              return JSON.parse(item);
            } catch {
              return null;
            }
          })
          .filter(Boolean)
          .reverse(); // –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º

        if (messages.length > 0) {
          allMessages[deviceId] = messages;
        }
      });

      return allMessages;
    } catch (error) {
      console.error(
        `Error getting all portnum messages for ${portnumName}:`,
        error.message
      );
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ portnum
   * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async getPortnumStats() {
    try {
      const stats = {};
      const portnumNames = [
        "TEXT_MESSAGE_APP",
        "POSITION_APP",
        "NODEINFO_APP",
        "TELEMETRY_APP",
        "NEIGHBORINFO_APP",
        "WAYPOINT_APP",
        "MAP_REPORT_APP",
        "TRACEROUTE_APP",
      ];

      for (const portnumName of portnumNames) {
        const pattern = `${portnumName}:*`;
        const keys = await this.redis.keys(pattern);

        stats[portnumName] = {
          deviceCount: keys.length,
          totalMessages: 0,
        };

        if (keys.length > 0) {
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
          const operations = keys.map((key) => ({
            command: "llen",
            args: [key],
          }));

          const lengths = await executeRedisPipeline(this.redis, operations);
          stats[portnumName].totalMessages = lengths.reduce(
            (sum, len) => sum + len,
            0
          );
        }
      }

      return stats;
    } catch (error) {
      console.error("Error getting portnum stats:", error.message);
      return {};
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞
   * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
   * @returns {boolean} - –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞
   */
  isCacheValid(key) {
    if (!this.cache.has(key)) return false;

    const timestamp = this.cacheTimestamps.get(key);
    return timestamp && Date.now() - timestamp < this.cacheTTL;
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  invalidateUserCache(userId) {
    const cacheKey = `user_${userId}`;
    this.cache.delete(cacheKey);
    this.cacheTimestamps.delete(cacheKey);
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–ª—è portnum —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {string} portnumName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ça
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  invalidatePortnumCache(portnumName, deviceId) {
    const cacheKey = `portnum_${portnumName}_${deviceId}`;
    this.cache.delete(cacheKey);
    this.cacheTimestamps.delete(cacheKey);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
   */
  clearCache() {
    this.cache.clear();
    this.cacheTimestamps.clear();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
   */
  getCacheStats() {
    const now = Date.now();
    const validEntries = Array.from(this.cacheTimestamps.entries()).filter(
      ([_, timestamp]) => now - timestamp < this.cacheTTL
    );

    return {
      totalEntries: this.cache.size,
      validEntries: validEntries.length,
      expiredEntries: this.cache.size - validEntries.length,
      memoryUsage: this.cache.size * 100, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    };
  }

  /**
   * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–π –∫—ç—à
   */
  startCacheCleanup() {
    setInterval(() => {
      const now = Date.now();
      const keysToDelete = [];

      this.cacheTimestamps.forEach((timestamp, key) => {
        if (now - timestamp >= this.cacheTTL) {
          keysToDelete.push(key);
        }
      });

      keysToDelete.forEach((key) => {
        this.cache.delete(key);
        this.cacheTimestamps.delete(key);
      });

      if (keysToDelete.length > 0) {
        console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ ${keysToDelete.length} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞`);
      }
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ Redis
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ hex (!015ba416) –∏–ª–∏ numeric (22782998) —Ñ–æ—Ä–º–∞—Ç–µ
   * @returns {number} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
   */
  async deleteAllDeviceData(deviceId) {
    try {
      let hexId, numericId;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
      if (deviceId.startsWith("!")) {
        // Hex —Ñ–æ—Ä–º–∞—Ç: !015ba416
        hexId = deviceId;
        numericId = parseInt(deviceId.substring(1), 16).toString();
      } else {
        // Numeric —Ñ–æ—Ä–º–∞—Ç: 22782998
        numericId = deviceId;
        hexId = `!${parseInt(deviceId).toString(16).padStart(8, "0")}`;
      }

      console.log(
        `üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${hexId} (${numericId})`
      );

      // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞)
      const keyPatterns = [
        // –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ (–ø–æ portnum)
        `TEXT_MESSAGE_APP:${numericId}`,
        `POSITION_APP:${numericId}`,
        `NODEINFO_APP:${numericId}`,
        `TELEMETRY_APP:${numericId}`,
        `NEIGHBORINFO_APP:${numericId}`,
        `WAYPOINT_APP:${numericId}`,
        `MAP_REPORT_APP:${numericId}`,
        `TRACEROUTE_APP:${numericId}`,

        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
        `dots:${numericId}`,
      ];

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const keysToDelete = [];

      for (const pattern of keyPatterns) {
        const exists = await this.redis.exists(pattern);
        if (exists) {
          keysToDelete.push(pattern);
        }
      }

      // –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏)
      const additionalPatterns = [`*:${numericId}`, `*:${hexId}`];

      for (const pattern of additionalPatterns) {
        try {
          const keys = await this.redis.keys(pattern);
          for (const key of keys) {
            if (!keysToDelete.includes(key)) {
              keysToDelete.push(key);
            }
          }
        } catch (error) {
          console.warn(
            `Warning: couldn't search pattern ${pattern}: ${error.message}`
          );
        }
      }

      // –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
      let deletedCount = 0;
      if (keysToDelete.length > 0) {
        deletedCount = await this.redis.del(...keysToDelete);
        console.log(
          `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –∫–ª—é—á–µ–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${hexId}:`,
          keysToDelete
        );
      } else {
        console.log(`‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${hexId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      this.invalidateUserCache(hexId);
      this.invalidateUserCache(numericId);

      // –û—á–∏—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—ç—à–∏
      const cacheKeysToDelete = [];
      this.cache.forEach((value, key) => {
        if (key.includes(hexId) || key.includes(numericId)) {
          cacheKeysToDelete.push(key);
        }
      });

      cacheKeysToDelete.forEach((key) => {
        this.cache.delete(key);
        this.cacheTimestamps.delete(key);
      });

      if (cacheKeysToDelete.length > 0) {
        console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ ${cacheKeysToDelete.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞`);
      }

      return deletedCount;
    } catch (error) {
      console.error(
        `Error deleting device data for ${deviceId}:`,
        error.message
      );
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (numeric)
   * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (mqttCheck)
   */
  async updateDotData(deviceId, updateData, options = {}) {
    try {
      const key = `dots:${deviceId}`;
      const currentTime = Date.now();

      // –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const existingData = await this.redis.hgetall(key);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
      const fieldsToUpdate = {};

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      if (
        updateData.longitude !== undefined ||
        updateData.latitude !== undefined
      ) {
        fieldsToUpdate.longitude = updateData.longitude;
        fieldsToUpdate.latitude = updateData.latitude;
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ node info - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞
      if (
        updateData.longName !== undefined ||
        updateData.shortName !== undefined
      ) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏
        if (updateData.longName !== undefined) {
          fieldsToUpdate.longName = updateData.longName;
        }
        if (updateData.shortName !== undefined) {
          fieldsToUpdate.shortName = updateData.shortName;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ MQTT: –µ—Å–ª–∏ gatewayId === rawDataId, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mqtt: "1"
      // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π gateway
      if (options && options.gatewayId && options.rawDataId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ MQTT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
        // MQTT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–º–µ—é—Ç gatewayId —Ä–∞–≤–Ω—ã–π —Å–≤–æ–µ–º—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É ID
        const isMqttDevice = options.gatewayId === options.rawDataId;

        if (isMqttDevice) {
          fieldsToUpdate.mqtt = "1";
        } else {
          // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ mqtt –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        }
      }

      // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
      fieldsToUpdate.s_time = currentTime;

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª—è–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏
      const mergedData = {
        ...existingData,
        ...fieldsToUpdate,
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const dotData = this._filterDotData(mergedData, currentTime);

      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
      if (!dotData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ Redis
        const existingKeys = Object.keys(existingData);
        if (existingKeys.length > 0) {
          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏, –Ω–æ —Å—Ç–∞–ª–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–º–∏ - —É–¥–∞–ª—è–µ–º –∫–ª—é—á
          await this.redis.del(key);
        }
        return; // –í—ã—Ö–æ–¥–∏–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Redis
      const redisData = {};
      Object.entries(dotData).forEach(([key, value]) => {
        if (typeof value === "object" && value !== null) {
          redisData[key] = JSON.stringify(value);
        } else {
          redisData[key] = String(value);
        }
      });

      await this.redis.hset(key, redisData);

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
      this.invalidateDotCache(deviceId);
    } catch (error) {
      console.error(`Error updating dot data for ${deviceId}:`, error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–∫–∏
   * @param {Object} parsedData - –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @returns {Object} - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  _createStandardDotData(parsedData, deviceId) {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const normalizedData = {
      longName: parsedData.longName || parsedData["Long Name"] || "",
      shortName: parsedData.shortName || parsedData["Short Name"] || "",
      longitude: parsedData.longitude || 0,
      latitude: parsedData.latitude || 0,
      s_time: parsedData.s_time || 0,
      mqtt: parsedData.mqtt || "",
    };

    const result = this._filterDotData(normalizedData, parsedData.s_time || 0);

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (!result) {
      return null;
    }

    return result;
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è dots
   * @param {Object} data - –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @param {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
   * @returns {Object|null} - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
   */
  _filterDotData(data, timestamp = null) {
    const currentTime = timestamp || Date.now();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    const allowedFields = [
      "longName",
      "shortName",
      "longitude",
      "latitude",
      "mqtt",
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    const filteredData = {};
    Object.entries(data).forEach(([key, value]) => {
      if (
        allowedFields.includes(key) &&
        value !== undefined &&
        value !== null
      ) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (key === "longitude" || key === "latitude") {
          const numValue = parseFloat(value);
          if (!isNaN(numValue)) {
            filteredData[key] = numValue;
          }
        } else {
          // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
          filteredData[key] = value;
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∏–º–µ–Ω–∏
    const hasLocation =
      typeof filteredData.longitude === "number" &&
      typeof filteredData.latitude === "number" &&
      filteredData.longitude !== 0 &&
      filteredData.latitude !== 0;

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω
    const hasName =
      (filteredData.longName &&
        typeof filteredData.longName === "string" &&
        filteredData.longName.trim() !== "") ||
      (filteredData.shortName &&
        typeof filteredData.shortName === "string" &&
        filteredData.shortName.trim() !== "");

    // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ª–∏–±–æ –∏–º—è
    const hasValidData = hasLocation || hasName;

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (!hasValidData) {
      return null;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const result = {
      longName: filteredData.longName || "",
      shortName: filteredData.shortName || "",
      longitude: filteredData.longitude || 0,
      latitude: filteredData.latitude || 0,
      mqtt: filteredData.mqtt || "",
      s_time: currentTime,
    };

    return result;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–æ—á–∫—É —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (numeric)
   * @param {Object} initialData - –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
   */
  async createDotData(deviceId, initialData = {}) {
    try {
      const key = `dots:${deviceId}`;
      const currentTime = Date.now();

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      const baseData = this._filterDotData(initialData, currentTime);

      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
      if (!baseData) {
        return null;
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Redis
      const redisData = {};
      Object.entries(baseData).forEach(([key, value]) => {
        if (typeof value === "object" && value !== null) {
          redisData[key] = JSON.stringify(value);
        } else {
          redisData[key] = String(value);
        }
      });

      await this.redis.hset(key, redisData);

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
      this.invalidateDotCache(deviceId);

      return baseData;
    } catch (error) {
      console.error(`Error creating dot data for ${deviceId}:`, error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (numeric)
   * @returns {Object} - –î–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
   */
  async getDotData(deviceId) {
    const cacheKey = `dot_${deviceId}`;

    if (this.isCacheValid(cacheKey)) {
      return this.cache.get(cacheKey);
    }

    try {
      const key = `dots:${deviceId}`;
      const data = await this.redis.hgetall(key);

      if (!data || Object.keys(data).length === 0) {
        return null;
      }

      // –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      const parsedData = {};
      Object.entries(data).forEach(([key, value]) => {
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
          parsedData[key] = JSON.parse(value);
        } catch {
          // –ï—Å–ª–∏ –Ω–µ JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (–∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞)
          if (!isNaN(value) && value !== "") {
            parsedData[key] = Number(value);
          } else {
            parsedData[key] = value;
          }
        }
      });

      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      const standardData = this._createStandardDotData(parsedData, deviceId);

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.cache.set(cacheKey, standardData);
      this.cacheTimestamps.set(cacheKey, Date.now());

      return standardData;
    } catch (error) {
      console.error(`Error getting dot data for ${deviceId}:`, error.message);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –¥–ª—è –∫–∞—Ä—Ç—ã
   * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö —Ç–æ—á–µ–∫
   */
  async getAllDotData() {
    const cacheKey = "all_dots";

    if (this.isCacheValid(cacheKey)) {
      return this.cache.get(cacheKey);
    }

    try {
      const pattern = "dots:*";
      const keys = await this.redis.keys(pattern);

      if (keys.length === 0) {
        return {};
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const operations = keys.map((key) => ({
        command: "hgetall",
        args: [key],
      }));

      const results = await executeRedisPipeline(this.redis, operations);

      const allDots = {};
      keys.forEach((key, index) => {
        const deviceId = key.split(":")[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∫–ª—é—á–∞ dots:1234567
        const data = results[index];

        if (data && Object.keys(data).length > 0) {
          // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ getDotData
          const parsedData = {};
          Object.entries(data).forEach(([dataKey, value]) => {
            try {
              parsedData[dataKey] = JSON.parse(value);
            } catch {
              if (!isNaN(value) && value !== "") {
                parsedData[dataKey] = Number(value);
              } else {
                parsedData[dataKey] = value;
              }
            }
          });

          // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
          const standardData = this._createStandardDotData(
            parsedData,
            deviceId
          );

          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          if (standardData) {
            allDots[deviceId] = standardData;
          }
        }
      });

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.cache.set(cacheKey, allDots);
      this.cacheTimestamps.set(cacheKey, Date.now());

      console.log(
        `üó∫Ô∏è [CACHE STORE] Dots data cached for key: ${cacheKey}, count: ${
          Object.keys(allDots).length
        }`
      );

      return allDots;
    } catch (error) {
      console.error("Error getting all dot data:", error.message);
      return {};
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–ª—è dot –¥–∞–Ω–Ω—ã—Ö
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  invalidateDotCache(deviceId) {
    const cacheKey = `dot_${deviceId}`;
    this.cache.delete(cacheKey);
    this.cacheTimestamps.delete(cacheKey);

    // –¢–∞–∫–∂–µ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –≤—Å–µ—Ö —Ç–æ—á–µ–∫
    this.cache.delete("all_dots");
    this.cacheTimestamps.delete("all_dots");
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç Redis
   */
  async disconnect() {
    try {
      await this.redis.quit();
      console.log("‚úÖ Redis –æ—Ç–∫–ª—é—á–µ–Ω");
    } catch (error) {
      console.error("Error disconnecting from Redis:", error.message);
    }
  }
}

export default RedisManager;
