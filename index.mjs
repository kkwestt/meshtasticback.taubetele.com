import fs from "fs";
import crypto from "crypto";
import path from "path";
import protobufjs from "protobufjs";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
import { servers, redisConfig, serverConfig } from "./config.mjs";
import { MQTTManager } from "./mqtt.mjs";
import { RedisManager } from "./redisManager.mjs";
import { HTTPServer } from "./httpServer.mjs";
import { handleTelegramMessage, initializeTelegramBot } from "./telegram.mjs";
import { ProtobufDecoder } from "./protobufDecoder.mjs";
import {
  shouldLogError,
  bufferToHex,
  formatMacAddress,
  round,
  isValidPacket,
  isValidDeviceMetrics,
  isValidEnvironmentMetrics,
  getMessageType,
  isValidMessage,
  getPortnumName,
  CONSTANTS,
} from "./utils.mjs";

const {
  MAX_METADATA_ITEMS_COUNT,
  DEVICE_EXPIRY_TIME,
  DECRYPTION_KEYS,
  PROTOBUFS_PATH,
} = CONSTANTS;

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Meshtastic Redis –∫–ª–∏–µ–Ω—Ç
 */
class MeshtasticRedisClient {
  constructor() {
    this.mqttManager = new MQTTManager();
    this.redisManager = null;
    this.httpServer = null;
    this.protoTypes = {};
    this.protobufDecoder = new ProtobufDecoder();
    this.stats = {
      messagesProcessed: 0,
      errorsCount: 0,
      startTime: Date.now(),
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  async init() {
    try {
      // console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Meshtastic MQTT –∫–ª–∏–µ–Ω—Ç–∞...");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º protobufs
      this.checkProtobufs();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º protobuf —Å—Ö–µ–º—ã
      await this.loadProtobufs();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
      await this.initializeRedis();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
      this.initializeHttpServer();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç
      this.initializeTelegramBot();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MQTT
      await this.initializeMqtt();

      // console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
      process.exit(1);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ protobuf —Ñ–∞–π–ª–æ–≤
   */
  checkProtobufs() {
    const mqttProtoPath = path.join(PROTOBUFS_PATH, "meshtastic/mqtt.proto");
    if (!fs.existsSync(mqttProtoPath)) {
      console.error(
        [
          "‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã Meshtastic protobufs.",
          "",
          "–î–ª—è —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å protobufs:",
          "git clone https://github.com/meshtastic/protobufs.git",
        ].join("\n")
      );
      throw new Error("Protobufs –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç protobuf —Å—Ö–µ–º—ã
   */
  async loadProtobufs() {
    try {
      const root = new protobufjs.Root();
      root.resolvePath = (origin, target) => path.join(PROTOBUFS_PATH, target);
      root.loadSync("meshtastic/mqtt.proto");

      this.protoTypes = {
        ServiceEnvelope: root.lookupType("ServiceEnvelope"),
        Data: root.lookupType("Data"),
        Position: root.lookupType("Position"),
        User: root.lookupType("User"),
        Telemetry: root.lookupType("Telemetry"),
        Waypoint: root.lookupType("Waypoint"),
        MapReport: root.lookupType("MapReport"),
        NeighborInfo: root.lookupType("NeighborInfo"),
        RouteDiscovery: root.lookupType("RouteDiscovery"),
      };

      // console.log("‚úÖ Protobuf —Å—Ö–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ protobuf —Å—Ö–µ–º:", error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Redis Manager
   */
  async initializeRedis() {
    try {
      this.redisManager = new RedisManager(redisConfig);
      await this.redisManager.ping();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
      this.redisManager.startCacheCleanup();

      // console.log("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:", error.message);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä
   */
  initializeHttpServer() {
    this.httpServer = new HTTPServer(this.redisManager, serverConfig);
    this.httpServer.start();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –±–æ—Ç
   */
  initializeTelegramBot() {
    initializeTelegramBot(this.redisManager.redis);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async initializeMqtt() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.mqttManager.setMessageHandler((server, topic, payload) => {
      this.handleMessage(server, topic, payload);
    });

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
    const result = await this.mqttManager.connectToAllServers(servers);

    if (result.successful === 0) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É");
    }

    console.log(
      `‚úÖ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${result.successful}/${result.total}`
    );
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  handleMessage(server, topic, payload) {
    try {
      this.stats.messagesProcessed++;

      // console.log("=".repeat(50));
      // console.log(`üì® [${server.name}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø–∏–∫: ${topic}`);

      // –ü–∞—Ä—Å–∏–º —Ç–æ–ø–∏–∫
      const topicParts = topic.split("/");
      if (topicParts.length < 3) {
        console.log(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ø–∏–∫–∞: ${topic}`);
        return;
      }

      const [, , type, channel, user] = topicParts;
      // console.log(`üìã –¢–∏–ø: ${type}, –ö–∞–Ω–∞–ª: ${channel}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user}`);

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (type === "stat") {
        console.log(`üìä –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON —Å–æ–æ–±—â–µ–Ω–∏—è
      if (type === "json") {
        this.handleJsonMessage(server, topic, user, payload);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º protobuf —Å–æ–æ–±—â–µ–Ω–∏—è
      if (payload && payload.length > 0) {
        // console.log(
        //   `üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º protobuf —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: ${payload.length} –±–∞–π—Ç`
        // );
        this.handleProtobufMessage(
          server,
          topic,
          user,
          new Uint8Array(payload)
        );
      } else {
        console.log(`‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload`);
      }
    } catch (error) {
      this.stats.errorsCount++;
      console.error(
        `‚ùå [${server.name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
        error.message
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  handleJsonMessage(server, topic, user, payload) {
    try {
      const jsonData = JSON.parse(payload.toString());
      // JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
      this.processEvent(server, topic, user, "json", "json", jsonData);
    } catch (parseError) {
      console.error(
        `‚ùå [${server.name}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`,
        parseError.message
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç protobuf —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  handleProtobufMessage(server, fullTopic, user, arrayBuffer) {
    try {
      // console.log(`üîç –î–µ–∫–æ–¥–∏—Ä—É–µ–º ServiceEnvelope...`);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞
      if (!isValidPacket(arrayBuffer)) {
        // console.log(`‚ùå –ü–∞–∫–µ—Ç –ù–ï –≤–∞–ª–∏–¥–Ω—ã–π`);
        return;
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      if (arrayBuffer.length > 1048576) {
        // 1MB –ª–∏–º–∏—Ç
        console.log(`‚ùå –ü–∞–∫–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${arrayBuffer.length} –±–∞–π—Ç`);
        return;
      }

      let serviceEnvelope;
      try {
        serviceEnvelope = this.protoTypes.ServiceEnvelope.decode(arrayBuffer);
      } catch (decodeError) {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–¥–∞–≤–ª—è–µ–º–∞—è –æ—à–∏–±–∫–∞
        if (shouldLogError(decodeError.message)) {
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è ServiceEnvelope: ${decodeError.message}`
          );
        }
        return;
      }

      if (!serviceEnvelope?.packet) {
        console.log(`‚ùå ServiceEnvelope –ù–ï –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω`);
        return;
      }

      const meshPacket = serviceEnvelope.packet;
      const { channelId, gatewayId } = serviceEnvelope;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º MeshPacket

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º decoded –¥–∞–Ω–Ω—ã–µ
      if (meshPacket.decoded) {
        this.processDecodedPacket(
          server,
          fullTopic,
          user,
          meshPacket,
          gatewayId
        );
      }
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
      else if (meshPacket.encrypted?.length > 0) {
        this.processEncryptedPacket(
          server,
          fullTopic,
          user,
          meshPacket,
          gatewayId
        );
      } else {
        console.log(`‚ö†Ô∏è –ù–µ—Ç decoded –∏ encrypted –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–∫–µ—Ç–µ`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ protobuf:`, error.message);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
   */
  processDecodedPacket(server, fullTopic, user, meshPacket, gatewayId) {
    const event = this.createEvent(
      server,
      fullTopic,
      user,
      meshPacket,
      gatewayId,
      meshPacket.decoded
    );
    const eventType = this.getEventTypeByPortnum(meshPacket.decoded.portnum);

    if (eventType) {
      this.processEvent(server, fullTopic, user, "decoded", eventType, event);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
   */
  processEncryptedPacket(server, fullTopic, user, meshPacket, gatewayId) {
    // console.log(`üîê –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç`);

    const decrypted = this.decrypt(meshPacket);
    if (decrypted) {
      // console.log(`‚úÖ –ü–∞–∫–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω, portnum: ${decrypted.portnum}`);

      const event = this.createEvent(
        server,
        fullTopic,
        user,
        meshPacket,
        gatewayId,
        decrypted
      );
      const eventType = this.getEventTypeByPortnum(decrypted.portnum);

      // console.log(`üéØ –¢–∏–ø —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: ${eventType}`);

      if (eventType) {
        this.processEvent(server, fullTopic, user, "decoded", eventType, event);
      } else {
        console.log(
          `‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π portnum –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º: ${decrypted.portnum}`
        );
      }
    } else {
      // –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
   */
  createEvent(server, fullTopic, user, meshPacket, gatewayId, data) {
    return {
      rxSnr: meshPacket.rxSnr,
      hopLimit: meshPacket.hopLimit,
      wantAck: meshPacket.wantAck,
      rxRssi: meshPacket.rxRssi,
      gatewayId,
      from: meshPacket.from,
      id: meshPacket.id,
      data,
      packet: meshPacket,
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –ø–æ portnum
   */
  getEventTypeByPortnum(portnum) {
    switch (portnum) {
      case 1:
      case "TEXT_MESSAGE_APP":
        return "message";
      case 3:
      case "POSITION_APP":
        return "position";
      case 4:
      case "NODEINFO_APP":
        return "user";
      case 67:
      case "TELEMETRY_APP":
        return "telemetry";
      case 71:
      case "NEIGHBORINFO_APP":
        return "neighborInfo";
      case 8:
      case "WAYPOINT_APP":
        return "waypoint";
      case 73:
      case "MAP_REPORT_APP":
        return "mapReport";
      case 70:
      case "TRACEROUTE_APP":
        return "traceroute";
      default:
        return null;
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  async processEvent(server, fullTopic, user, eventName, eventType, event) {
    try {
      const { from } = event;
      if (!from) {
        return;
      }

      const key = `device:${from}`;
      const serverTime = Date.now();

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ä—Ç—ã [[memory:3665001]]
      await this.updateDotActivityTime(from, event, server);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ portnum
      if (event.data?.portnum) {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        let dataToSave = event.data;
        if (event.data.payload) {
          try {
            const payloadBuffer = Buffer.from(event.data.payload, "base64");
            const decodedPayload = this.protobufDecoder.decodePayload(
              event.data.portnum,
              payloadBuffer
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ base64 payload
            dataToSave = {
              portnum: event.data.portnum,
              ...decodedPayload.data,
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä—É—é —Å—Ö–µ–º—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏–ø–æ–≤
            if (
              event.data.portnum === 4 ||
              event.data.portnum === "NODEINFO_APP"
            ) {
              await this.saveUserDataToOldSchema(
                server,
                event,
                key,
                serverTime,
                decodedPayload.data
              );
            } else if (
              event.data.portnum === 3 ||
              event.data.portnum === "POSITION_APP"
            ) {
              await this.savePositionDataToOldSchema(
                server,
                event,
                key,
                serverTime,
                decodedPayload.data
              );
            } else if (
              event.data.portnum === 67 ||
              event.data.portnum === "TELEMETRY_APP"
            ) {
              await this.saveTelemetryDataToOldSchema(
                server,
                event,
                key,
                serverTime,
                decodedPayload.data
              );
            }
          } catch (error) {
            // –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            dataToSave = {
              portnum: event.data.portnum,
              payload: event.data.payload,
            };
          }
        }

        const portnumData = {
          timestamp: Date.now(),
          from: event.from,
          to: event.packet?.to,
          rxTime: event.packet?.rxTime * 1000 || Date.now(),
          rxSnr: event.rxSnr,
          hopLimit: event.hopLimit,
          rxRssi: event.rxRssi,
          gatewayId: event.gatewayId,
          server: server.name,
          rawData: dataToSave,
        };

        await this.redisManager.savePortnumMessage(
          event.data.portnum,
          event.from,
          portnumData
        );
      }

      // –°–¢–ê–†–ê–Ø –°–•–ï–ú–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ (–∫—Ä–æ–º–µ user - –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ)
      switch (eventType) {
        // case "user": // –£–±—Ä–∞–Ω–æ - —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ
        //   await this.handleUserEvent(server, event, key, serverTime);
        //   break;
        case "position":
          await this.handlePositionEvent(server, event, key, serverTime);
          break;
        case "telemetry":
          await this.handleTelemetryEvent(server, event, key, serverTime);
          break;
        case "message":
          await this.handleMessageEvent(
            server,
            fullTopic,
            event,
            key,
            serverTime
          );
          break;
        case "neighborInfo":
          await this.handleNeighborInfoEvent(server, event, from, serverTime);
          break;
        case "mapReport":
          await this.handleMapReportEvent(server, event, from, serverTime);
          break;
        default:
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è:", error.message);
    }
  }

  /**
   * –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è payload
   */
  decodePayload(protoType, payload) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!payload || typeof payload !== "string") {
        throw new Error(
          `Invalid payload: expected base64 string, got ${typeof payload}`
        );
      }

      if (!this.protoTypes[protoType]) {
        throw new Error(`Unknown proto type: ${protoType}`);
      }

      const payloadBuffer = Buffer.from(payload, "base64");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
      if (payloadBuffer.length === 0) {
        throw new Error(`Empty payload after base64 decode`);
      }

      if (payloadBuffer.length > 65536) {
        // 64KB –ª–∏–º–∏—Ç
        throw new Error(`Payload too large: ${payloadBuffer.length} bytes`);
      }

      return this.protoTypes[protoType].decode(payloadBuffer);
    } catch (error) {
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–¥–∞–≤–ª—è–µ–º–∞—è –æ—à–∏–±–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é
      if (shouldLogError(error.message)) {
        throw new Error(`Failed to decode ${protoType}: ${error.message}`);
      }
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –ø–æ–¥–∞–≤–ª—è–µ–º—ã—Ö –æ—à–∏–±–æ–∫
      return null;
    }
  }

  /**
   * –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è deviceData —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   */
  createDeviceData(event, data) {
    return {
      timestamp: Date.now(),
      rxTime: event.packet?.rxTime * 1000 || Date.now(),
      type: "broadcast",
      from: event.from,
      to: event.packet?.to || 4294967295,
      rxSnr: event.rxSnr,
      hopLimit: event.hopLimit,
      rxRssi: event.rxRssi,
      gatewayId: event.gatewayId,
      data,
    };
  }

  /**
   * –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Redis (—Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞)
   */
  async saveToRedis(key, serverTime, data, server, dataType) {
    await this.redisManager.saveDeviceData(key, {
      server: server.name,
      timestamp: serverTime,
      [dataType]: JSON.stringify(data),
    });
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ä—É—é —Å—Ö–µ–º—É
   */
  async saveUserDataToOldSchema(
    server,
    event,
    key,
    serverTime,
    decodedUserData
  ) {
    try {
      console.log(
        `üîç [DEBUG] NODEINFO_APP data for device ${event.from}:`,
        decodedUserData
      );

      const id = decodedUserData.id;
      const longName = decodedUserData.long_name || decodedUserData.longName;
      const shortName = decodedUserData.short_name || decodedUserData.shortName;
      const macaddr = decodedUserData.macaddr;
      const publicKey = decodedUserData.public_key || decodedUserData.publicKey;
      const hwModel = decodedUserData.hw_model || decodedUserData.hwModel;
      const role = decodedUserData.role;

      console.log(
        `üîç [DEBUG] Extracted names - longName: "${longName}", shortName: "${shortName}"`
      );

      const userRecord = {
        from: event.from,
        shortName,
        longName,
        macaddr: formatMacAddress(macaddr),
        publicKey: bufferToHex(publicKey),
        hwModel,
        role,
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ user:!hexId
      await this.redisManager.saveUserData(id, userRecord);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ device –∫–ª—é—á
      const deviceData = this.createDeviceData(event, userRecord);
      await this.saveToRedis(key, serverTime, deviceData, server, "user");

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤ dots –∫–ª—é—á–µ
      await this.redisManager.updateDotData(event.from, {
        shortName: shortName,
        longName: longName,
        hw_model: hwModel,
        role,
      });
    } catch (error) {
      console.error("‚ùå Error saving user data to old schema:", error.message);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å—Ç–∞—Ä—É—é —Å—Ö–µ–º—É
   */
  async savePositionDataToOldSchema(
    server,
    event,
    key,
    serverTime,
    decodedPositionData
  ) {
    try {
      const {
        latitude_i: latitudeI,
        longitude_i: longitudeI,
        altitude,
        sats_in_view: satsInView,
        time: posTime,
      } = decodedPositionData;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (latitudeI && longitudeI && latitudeI !== 0 && longitudeI !== 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ gps –∫–ª—é—á
        const gpsKey = `gps:${event.from}`;
        const newPosItem = {
          latitudeI,
          longitudeI,
          altitude: altitude || undefined,
          time: serverTime,
        };

        await this.redisManager.upsertItem(gpsKey, serverTime, newPosItem);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ device –∫–ª—é—á
        const deviceData = this.createDeviceData(event, {
          latitudeI,
          longitudeI,
          altitude: altitude || undefined,
          time: posTime || undefined,
          satsInView,
        });

        await this.saveToRedis(key, serverTime, deviceData, server, "position");

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ dots –∫–ª—é—á–µ
        const latitude = latitudeI / 1e7;
        const longitude = longitudeI / 1e7;

        await this.redisManager.updateDotData(event.from, {
          latitude,
          longitude,
        });
      }
    } catch (error) {
      console.error(
        "‚ùå Error saving position data to old schema:",
        error.message
      );
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –≤ —Å—Ç–∞—Ä—É—é —Å—Ö–µ–º—É
   */
  async saveTelemetryDataToOldSchema(
    server,
    event,
    key,
    serverTime,
    decodedTelemetryData
  ) {
    try {
      const { type, variant } =
        decodedTelemetryData.rawData || decodedTelemetryData;

      if (type === "deviceMetrics" && variant?.value) {
        const deviceMetrics = variant.value;
        await this.handleDeviceMetrics(
          server,
          event,
          key,
          serverTime,
          deviceMetrics
        );
      } else if (type === "environmentMetrics" && variant?.value) {
        const environmentMetrics = variant.value;
        await this.handleEnvironmentMetrics(
          server,
          event,
          key,
          serverTime,
          environmentMetrics
        );
      }
    } catch (error) {
      console.error(
        "‚ùå Error saving telemetry data to old schema:",
        error.message
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–°–¢–ê–†–ê–Ø –°–•–ï–ú–ê)
   */
  async handlePositionEvent(server, event, key, serverTime) {
    try {
      if (!event.data?.payload) return;

      const positionData = this.decodePayload("Position", event.data.payload);
      if (!positionData) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

      const {
        latitudeI,
        longitudeI,
        altitude,
        satsInView,
        time: posTime,
      } = positionData;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (latitudeI && longitudeI && latitudeI !== 0 && longitudeI !== 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ gps –∫–ª—é—á
        const gpsKey = `gps:${event.from}`;
        const newPosItem = {
          latitudeI,
          longitudeI,
          altitude: altitude || undefined,
          time: serverTime,
        };

        await this.redisManager.upsertItem(gpsKey, serverTime, newPosItem);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ device –∫–ª—é—á
        const deviceData = this.createDeviceData(event, {
          latitudeI,
          longitudeI,
          altitude: altitude || undefined,
          time: posTime || undefined,
          satsInView,
        });

        await this.saveToRedis(key, serverTime, deviceData, server, "position");
      }
    } catch (error) {
      console.error("Error handling position event:", error.message);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è (–°–¢–ê–†–ê–Ø –°–•–ï–ú–ê)
   */
  async handleTelemetryEvent(server, event, key, serverTime) {
    try {
      if (!event.data?.payload) return;

      const telemetryData = this.decodePayload("Telemetry", event.data.payload);
      if (!telemetryData) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
      let deviceMetrics = null;
      let environmentMetrics = null;

      if (telemetryData.variant?.case === "deviceMetrics") {
        deviceMetrics = telemetryData.variant.value;
      } else if (telemetryData.variant?.case === "environmentMetrics") {
        environmentMetrics = telemetryData.variant.value;
      } else if (telemetryData.deviceMetrics) {
        deviceMetrics = telemetryData.deviceMetrics;
      } else if (telemetryData.environmentMetrics) {
        environmentMetrics = telemetryData.environmentMetrics;
      }

      if (deviceMetrics) {
        await this.handleDeviceMetrics(
          server,
          event,
          key,
          serverTime,
          deviceMetrics
        );
      } else if (environmentMetrics) {
        await this.handleEnvironmentMetrics(
          server,
          event,
          key,
          serverTime,
          environmentMetrics
        );
      }
    } catch (error) {
      console.error("Error handling telemetry event:", error.message);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–°–¢–ê–†–ê–Ø –°–•–ï–ú–ê)
   */
  async handleDeviceMetrics(server, event, key, serverTime, deviceMetrics) {
    let {
      batteryLevel,
      voltage,
      channelUtilization,
      airUtilTx,
      uptimeSeconds,
    } = deviceMetrics;

    // –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    batteryLevel = batteryLevel > 100 ? 100 : round(batteryLevel, 0);
    voltage = round(voltage, 3);
    channelUtilization = round(channelUtilization, 1);
    airUtilTx = round(airUtilTx, 3);

    const newMetricsItem = {
      batteryLevel,
      voltage,
      channelUtilization,
      airUtilTx,
      uptimeSeconds,
    };

    if (isValidDeviceMetrics(newMetricsItem)) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ deviceMetrics –∫–ª—é—á
      const telemetryKey = `deviceMetrics:${event.from}`;
      await this.redisManager.upsertItem(
        telemetryKey,
        serverTime,
        newMetricsItem
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ device –∫–ª—é—á
      const deviceData = this.createDeviceData(event, {
        variant: {
          case: "deviceMetrics",
          value: newMetricsItem,
        },
      });

      await this.saveToRedis(
        key,
        serverTime,
        deviceData,
        server,
        "deviceMetrics"
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ dots –∫–ª—é—á–µ
      await this.redisManager.updateDotData(event.from, {
        battery_level: batteryLevel,
        voltage,
        channel_utilization: channelUtilization,
        air_util_tx: airUtilTx,
        uptime_seconds: uptimeSeconds,
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–°–¢–ê–†–ê–Ø –°–•–ï–ú–ê)
   */
  async handleEnvironmentMetrics(
    server,
    event,
    key,
    serverTime,
    environmentMetrics
  ) {
    let {
      temperature,
      relativeHumidity,
      barometricPressure,
      gasResistance,
      voltage,
      current,
    } = environmentMetrics;

    // –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    temperature = round(temperature, 1);
    relativeHumidity = round(relativeHumidity, 0);
    barometricPressure = round(barometricPressure, 0);
    gasResistance = round(gasResistance, 0);
    voltage = round(voltage, 2);
    current = round(current, 2);

    const newEnvItem = {
      temperature,
      relativeHumidity,
      barometricPressure,
      gasResistance,
      voltage,
      current,
    };

    if (isValidEnvironmentMetrics(newEnvItem)) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ environmentMetrics –∫–ª—é—á
      const telemetryKey = `environmentMetrics:${event.from}`;
      await this.redisManager.upsertItem(telemetryKey, serverTime, newEnvItem);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ device –∫–ª—é—á
      const deviceData = this.createDeviceData(event, {
        variant: {
          case: "environmentMetrics",
          value: newEnvItem,
        },
      });

      await this.saveToRedis(
        key,
        serverTime,
        deviceData,
        server,
        "environmentMetrics"
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–°–¢–ê–†–ê–Ø –°–•–ï–ú–ê)
   */
  async handleMessageEvent(server, fullTopic, event, key, serverTime) {
    const messageType = getMessageType(event);

    let messageText = "";
    try {
      if (event.data?.payload) {
        const payloadBuffer = Buffer.from(event.data.payload, "base64");
        messageText = payloadBuffer.toString("utf8");
      }
    } catch (error) {
      console.error("Error decoding message:", error.message);
      return;
    }

    if (messageText && messageText.trim() !== "") {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ message –∫–ª—é—á
      const messageKey = `message:${event.from}`;
      const messageItem = {
        rxTime: event.packet?.rxTime * 1000 || Date.now(),
        type: messageType,
        rxSnr: event.rxSnr,
        hopLimit: event.hopLimit,
        rxRssi: event.rxRssi,
        gatewayId: event.gatewayId,
        data: messageText,
      };

      await this.redisManager.upsertItem(messageKey, serverTime, messageItem);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ device –∫–ª—é—á —Ç–æ–ª—å–∫–æ broadcast —Å–æ–æ–±—â–µ–Ω–∏—è
      if (messageType === "broadcast") {
        const deviceData = this.createDeviceData(event, messageText);
        await this.saveToRedis(key, serverTime, deviceData, server, "message");
      }

      console.log(
        `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: "${messageText.substring(0, 50)}${
          messageText.length > 50 ? "..." : ""
        }"`
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
      const telegramEvent = {
        ...event,
        type: messageType,
        data: messageText,
      };
      handleTelegramMessage(
        this.redisManager.redis,
        server,
        fullTopic,
        telegramEvent
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å–µ–¥—è—Ö (–°–¢–ê–†–ê–Ø –°–•–ï–ú–ê)
   */
  async handleNeighborInfoEvent(server, event, from, serverTime) {
    try {
      if (!event.data?.payload) return;

      const neighborInfoData = this.decodePayload(
        "NeighborInfo",
        event.data.payload
      );
      if (!neighborInfoData) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

      const { nodeId, lastSentById, nodeBroadcastIntervalSecs, neighbors } =
        neighborInfoData;

      const processedNeighbors = neighbors
        ? neighbors.map((neighbor) => ({
            nodeId: neighbor.nodeId,
            snr: neighbor.snr ? round(neighbor.snr, 2) : undefined,
            lastRxTime: neighbor.lastRxTime,
            nodeIdStr: neighbor.nodeId
              ? `!${neighbor.nodeId.toString(16).padStart(8, "0")}`
              : undefined,
          }))
        : [];

      const newNeighborInfoItem = {
        nodeId,
        nodeIdStr: nodeId
          ? `!${nodeId.toString(16).padStart(8, "0")}`
          : undefined,
        lastSentById,
        lastSentByIdStr: lastSentById
          ? `!${lastSentById.toString(16).padStart(8, "0")}`
          : undefined,
        nodeBroadcastIntervalSecs,
        neighborsCount: processedNeighbors.length,
        neighbors: processedNeighbors,
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ neighborInfo –∫–ª—é—á
      const neighborInfoKey = `neighborInfo:${from}`;
      await this.redisManager.upsertItem(
        neighborInfoKey,
        serverTime,
        newNeighborInfoItem
      );
    } catch (error) {
      console.error("Error handling neighbor info event:", error.message);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –∫–∞—Ä—Ç—ã (–°–¢–ê–†–ê–Ø –°–•–ï–ú–ê)
   */
  async handleMapReportEvent(server, event, from, serverTime) {
    try {
      // –î–∞–Ω–Ω—ã–µ —É–∂–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã –≤ protobufDecoder.mjs
      const mapReportData = event.data?.decoded;

      if (mapReportData) {
        const {
          longName,
          shortName,
          role,
          hwModel,
          firmwareVersion,
          region,
          modemPreset,
          hasDefaultChannel,
          latitudeI,
          longitudeI,
          altitude,
          positionPrecision,
          numOnlineLocalNodes,
        } = mapReportData;

        const newMapReportItem = {
          longName,
          shortName,
          role,
          hwModel,
          firmwareVersion,
          region,
          modemPreset,
          hasDefaultChannel,
          latitude: latitudeI ? round(latitudeI / 1e7, 6) : undefined,
          longitude: longitudeI ? round(longitudeI / 1e7, 6) : undefined,
          altitude: altitude ? round(altitude, 0) : undefined,
          positionPrecision,
          numOnlineLocalNodes,
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ mapReport –∫–ª—é—á
        const mapReportKey = `mapReport:${from}`;
        await this.redisManager.upsertItem(
          mapReportKey,
          serverTime,
          newMapReportItem
        );
      }
    } catch (error) {
      console.error("Error handling map report event:", error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç nonce –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
   */
  createNonce(packetId, fromNode) {
    const packetId64 = BigInt(packetId);
    const blockCounter = 0;
    const buf = Buffer.alloc(16);

    buf.writeBigUInt64LE(packetId64, 0);
    buf.writeUInt32LE(fromNode, 8);
    buf.writeUInt32LE(blockCounter, 12);

    return buf;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
   */
  async updateDotActivityTime(from, event, server) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π
      await this.redisManager.updateDotData(from, {});
    } catch (error) {
      console.error("Error updating dot activity time:", error.message);
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç
   */
  decrypt(packet) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!packet?.encrypted || !packet.id || !packet.from) {
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (packet.encrypted.length === 0 || packet.encrypted.length > 65536) {
      return null;
    }

    for (const decryptionKey of DECRYPTION_KEYS) {
      try {
        const key = Buffer.from(decryptionKey, "base64");
        const nonceBuffer = this.createNonce(packet.id, packet.from);

        let algorithm = null;
        if (key.length === 16) {
          algorithm = "aes-128-ctr";
        } else if (key.length === 32) {
          algorithm = "aes-256-ctr";
        } else {
          continue;
        }

        const decipher = crypto.createDecipheriv(algorithm, key, nonceBuffer);
        const decryptedBuffer = Buffer.concat([
          decipher.update(packet.encrypted),
          decipher.final(),
        ]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (decryptedBuffer.length === 0 || decryptedBuffer.length > 65536) {
          continue;
        }

        try {
          return this.protoTypes.Data.decode(decryptedBuffer);
        } catch (decodeError) {
          // –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–ª—é—á–æ–º
          continue;
        }
      } catch (e) {
        // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
      }
    }

    return null;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  getStats() {
    const uptime = Date.now() - this.stats.startTime;
    const mqttStats = this.mqttManager.getConnectionStats();
    const cacheStats = this.redisManager.getCacheStats();

    return {
      uptime,
      messages: {
        processed: this.stats.messagesProcessed,
        errors: this.stats.errorsCount,
        rate: this.stats.messagesProcessed / (uptime / 1000), // —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
      },
      mqtt: mqttStats,
      cache: cacheStats,
      memory: process.memoryUsage(),
    };
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
   */
  async disconnect() {
    console.log("üëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...");

    try {
      // –û—Ç–∫–ª—é—á–∞–µ–º MQTT
      await this.mqttManager.disconnect();

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
      if (this.httpServer) {
        await this.httpServer.stop();
      }

      // –û—Ç–∫–ª—é—á–∞–µ–º Redis
      if (this.redisManager) {
        await this.redisManager.disconnect();
      }
    } catch (error) {}
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function main() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ Meshtastic MQTT —Å–µ—Ä–≤–µ—Ä–∞...");
  console.log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${servers.length} —Å–µ—Ä–≤–µ—Ä–∞–º:`);
  servers.forEach((server) => {
    console.log(`  üåê ${server.name} (${server.address})`);
  });

  const client = new MeshtasticRedisClient();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  const gracefulShutdown = async (signal) => {
    console.log(`\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = client.getStats();
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:`);
    console.log(`  üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.messages.processed}`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${stats.messages.errors}`);
    console.log(`  ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.round(stats.uptime / 1000)}—Å`);
    console.log(
      `  üåê MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${stats.mqtt.connected}/${stats.mqtt.total}`
    );

    await client.disconnect();
    process.exit(0);
  };

  process.on("SIGINT", () => gracefulShutdown("SIGINT"));
  process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
  await client.init();

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  setInterval(() => {
    const stats = client.getStats();
    console.log(
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${
        stats.messages.processed
      } —Å–æ–æ–±—â–µ–Ω–∏–π, ${stats.messages.rate.toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å`
    );
  }, 300000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export default MeshtasticRedisClient;
