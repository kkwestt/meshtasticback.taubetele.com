import fs from "fs";
import crypto from "crypto";
import path from "path";
import protobufjs from "protobufjs";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
import {
  servers,
  redisConfig,
  mqttReceiverConfig,
  botSettings,
} from "../config.mjs";
import { MQTTManager } from "./mqtt.mjs";
import { RedisManager } from "./redisManager.mjs";
import { ProtobufDecoder } from "./protobufDecoder.mjs";
import {
  shouldLogError,
  bufferToHex,
  formatMacAddress,
  round,
  isValidDeviceMetrics,
  isValidEnvironmentMetrics,
  getMessageType,
  isValidMessage,
  isValidPacket,
  getPortnumName,
  isValidUserName,
  CONSTANTS,
} from "./utils.mjs";
import {
  initializeTelegramBot,
  handleTelegramMessage,
  cleanupTelegramResources,
  sendPersonalMessage,
} from "./telegram.mjs";

const {
  MAX_METADATA_ITEMS_COUNT,
  DEVICE_EXPIRY_TIME,
  DECRYPTION_KEYS,
  PROTOBUFS_PATH,
} = CONSTANTS;

/**
 * MQTT Receiver - —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ MQTT –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis
 */
class MqttReceiver {
  constructor() {
    this.mqttManager = new MQTTManager();
    this.redisManager = null;
    this.protoTypes = {};
    this.protobufDecoder = new ProtobufDecoder();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async init() {
    try {
      console.log("üöÄ [MQTT-Receiver] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MQTT Receiver...");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º protobufs
      this.checkProtobufs();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º protobuf —Å—Ö–µ–º—ã
      await this.loadProtobufs();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏)
      await this.initializeRedis();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
      await this.initializeTelegram();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MQTT
      await this.initializeMqtt();

      console.log("‚úÖ [MQTT-Receiver] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    } catch (error) {
      console.error("‚ùå [MQTT-Receiver] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
      process.exit(1);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ protobuf —Ñ–∞–π–ª–æ–≤
   */
  checkProtobufs() {
    // –ü—É—Ç—å –∫ protobufs –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    const protobufPath = path.join(
      process.cwd(),
      "protobufs",
      "meshtastic/mqtt.proto"
    );
    console.log(`–ü—Ä–æ–≤–µ—Ä—è—é protobufs –ø–æ –ø—É—Ç–∏: ${protobufPath}`);
    console.log(`–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`);
    if (!fs.existsSync(protobufPath)) {
      console.error(
        [
          "‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã Meshtastic protobufs.",
          "",
          "–î–ª—è —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å protobufs:",
          "git clone https://github.com/meshtastic/protobufs.git",
        ].join("\n")
      );
      throw new Error("Protobufs –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç protobuf —Å—Ö–µ–º—ã
   */
  async loadProtobufs() {
    try {
      const root = new protobufjs.Root();
      root.resolvePath = (origin, target) =>
        path.join(process.cwd(), "protobufs", target);
      root.loadSync("meshtastic/mqtt.proto");

      this.protoTypes = {
        ServiceEnvelope: root.lookupType("ServiceEnvelope"),
        Data: root.lookupType("Data"),
        Position: root.lookupType("Position"),
        User: root.lookupType("User"),
        Telemetry: root.lookupType("Telemetry"),
        Waypoint: root.lookupType("Waypoint"),
        MapReport: root.lookupType("MapReport"),
        NeighborInfo: root.lookupType("NeighborInfo"),
        RouteDiscovery: root.lookupType("RouteDiscovery"),
      };

      console.log("‚úÖ [MQTT-Receiver] Protobuf —Å—Ö–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
    } catch (error) {
      console.error("‚ùå [MQTT-Receiver] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ protobuf —Å—Ö–µ–º:", error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Redis Manager (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏)
   */
  async initializeRedis() {
    try {
      this.redisManager = new RedisManager(redisConfig);
      await this.redisManager.ping();

      console.log("‚úÖ [MQTT-Receiver] Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    } catch (error) {
      console.error(
        "‚ùå [MQTT-Receiver] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:",
        error.message
      );
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–∞
   */
  async initializeTelegram() {
    if (botSettings.ENABLE) {
      console.log("ü§ñ [MQTT-Receiver] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...");
      initializeTelegramBot(this.redisManager);
      console.log("‚úÖ [MQTT-Receiver] Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    } else {
      console.log(
        "üö´ [MQTT-Receiver] Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω (TELEGRAM_ENABLED=false)"
      );
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async initializeMqtt() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.mqttManager.setMessageHandler((server, topic, payload) => {
      this.handleMessage(server, topic, payload);
    });

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
    const result = await this.mqttManager.connectToAllServers(servers);

    if (result.successful === 0) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É");
    }

    console.log(
      `‚úÖ [MQTT-Receiver] MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${result.successful}/${result.total}`
    );
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  handleMessage(server, topic, payload) {
    try {
      // –ü–∞—Ä—Å–∏–º —Ç–æ–ø–∏–∫
      const topicParts = topic.split("/");
      if (topicParts.length < 3) {
        console.log(
          `‚ö†Ô∏è [MQTT-Receiver] [${server.name}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ø–∏–∫–∞: ${topic}`
        );
        return;
      }

      const [, , type, channel, user] = topicParts;

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (type === "stat") {
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON —Å–æ–æ–±—â–µ–Ω–∏—è
      if (type === "json") {
        this.handleJsonMessage(server, topic, user, payload);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º protobuf —Å–æ–æ–±—â–µ–Ω–∏—è
      if (payload && payload.length > 0) {
        this.handleProtobufMessage(
          server,
          topic,
          user,
          new Uint8Array(payload)
        );
      }
    } catch (error) {
      if (shouldLogError(error.message)) {
        console.error(
          `‚ùå [MQTT-Receiver] [${server.name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`,
          error.message
        );
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  handleJsonMessage(server, topic, user, payload) {
    try {
      const jsonData = JSON.parse(payload.toString());
      this.processEvent(server, topic, user, "json", "json", jsonData);
    } catch (parseError) {
      console.error(
        `‚ùå [MQTT-Receiver] [${server.name}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`,
        parseError.message
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç protobuf —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  handleProtobufMessage(server, fullTopic, user, arrayBuffer) {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞
      if (!isValidPacket(arrayBuffer)) {
        arrayBuffer = null;
        return;
      }

      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
      if (arrayBuffer.length > 524288) {
        console.log(
          `‚ùå [MQTT-Receiver] [${server.name}] –ü–∞–∫–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${arrayBuffer.length} –±–∞–π—Ç –æ—Ç ${user}`
        );
        arrayBuffer = null;
        return;
      }

      if (arrayBuffer.length < 10) {
        arrayBuffer = null;
        return;
      }

      let serviceEnvelope;
      try {
        serviceEnvelope = this.protoTypes.ServiceEnvelope.decode(arrayBuffer);
      } catch (decodeError) {
        if (shouldLogError(decodeError.message)) {
          console.error(
            `‚ùå [MQTT-Receiver] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è ServiceEnvelope: ${decodeError.message}`
          );
        }
        return;
      }

      if (!serviceEnvelope?.packet) {
        return;
      }

      const meshPacket = serviceEnvelope.packet;
      const { channelId, gatewayId } = serviceEnvelope;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º decoded –¥–∞–Ω–Ω—ã–µ
      if (meshPacket.decoded) {
        this.processDecodedPacket(
          server,
          fullTopic,
          user,
          meshPacket,
          gatewayId
        );
      }
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
      else if (meshPacket.encrypted?.length > 0) {
        this.processEncryptedPacket(
          server,
          fullTopic,
          user,
          meshPacket,
          gatewayId
        );
      }
    } catch (error) {
      console.error(
        `‚ùå [MQTT-Receiver] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ protobuf:`,
        error.message
      );
    } finally {
      arrayBuffer = null;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
   */
  processDecodedPacket(server, fullTopic, user, meshPacket, gatewayId) {
    const event = this.createEvent(
      server,
      fullTopic,
      user,
      meshPacket,
      gatewayId,
      meshPacket.decoded
    );
    const eventType = this.getEventTypeByPortnum(meshPacket.decoded.portnum);

    if (eventType) {
      this.processEvent(server, fullTopic, user, "decoded", eventType, event);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
   */
  processEncryptedPacket(server, fullTopic, user, meshPacket, gatewayId) {
    const decrypted = this.decrypt(meshPacket);
    if (decrypted) {
      const event = this.createEvent(
        server,
        fullTopic,
        user,
        meshPacket,
        gatewayId,
        decrypted
      );
      const eventType = this.getEventTypeByPortnum(decrypted.portnum);

      if (eventType) {
        this.processEvent(server, fullTopic, user, "decoded", eventType, event);
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
   */
  createEvent(server, fullTopic, user, meshPacket, gatewayId, data) {
    return {
      rxSnr: meshPacket.rxSnr,
      hopLimit: meshPacket.hopLimit,
      wantAck: meshPacket.wantAck,
      rxRssi: meshPacket.rxRssi,
      gatewayId,
      from: meshPacket.from,
      to: meshPacket.to,
      id: meshPacket.id,
      data,
      packet: meshPacket,
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –ø–æ portnum
   */
  getEventTypeByPortnum(portnum) {
    switch (portnum) {
      case 1:
      case "TEXT_MESSAGE_APP":
        return "message";
      case 3:
      case "POSITION_APP":
        return "position";
      case 4:
      case "NODEINFO_APP":
        return "user";
      case 67:
      case "TELEMETRY_APP":
        return "telemetry";
      case 71:
      case "NEIGHBORINFO_APP":
        return "neighborInfo";
      case 8:
      case "WAYPOINT_APP":
        return "waypoint";
      case 73:
      case "MAP_REPORT_APP":
        return "mapReport";
      case 70:
      case "TRACEROUTE_APP":
        return "traceroute";
      default:
        return null;
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  async processEvent(server, fullTopic, user, eventName, eventType, event) {
    try {
      const { from } = event;
      if (!from) {
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
      await this.updateDotActivityTime(from, event, server);

      let dataToSave = event.data;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ portnum
      if (event.data?.portnum) {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (event.data.payload) {
          try {
            const payloadBuffer = Buffer.from(event.data.payload, "base64");
            const decodedPayload = this.protobufDecoder.decodePayload(
              event.data.portnum,
              payloadBuffer
            );

            dataToSave = {
              portnum: event.data.portnum,
              ...decodedPayload.data,
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await this.updateDotDataFromPortnum(
              event.data.portnum,
              event.from,
              decodedPayload.data,
              {
                gatewayId: event.gatewayId,
                rawDataId: decodedPayload.data.id,
              }
            );
          } catch (error) {
            dataToSave = {
              portnum: event.data.portnum,
              payload: event.data.payload,
            };
          }
        }

        const portnumData = {
          timestamp: Date.now(),
          from: event.from,
          to: event.packet?.to,
          rxTime: event.packet?.rxTime * 1000 || Date.now(),
          rxSnr: event.rxSnr,
          hopLimit: event.hopLimit,
          rxRssi: event.rxRssi,
          gatewayId: event.gatewayId,
          server: server.name,
          rawData: dataToSave,
        };

        await this.redisManager.savePortnumMessage(
          event.data.portnum,
          event.from,
          portnumData
        );
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (
        eventType === "message" &&
        event.data?.portnum === 1 &&
        botSettings.ENABLE
      ) {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º handleTelegramMessage
        const telegramEvent = {
          id: event.id,
          from: event.from,
          to: event.to, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ to
          gatewayId: event.gatewayId,
          rxRssi: event.rxRssi,
          rxSnr: event.rxSnr,
          hopLimit: event.hopLimit,
          type: "broadcast", // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞–∫ broadcast –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          data: dataToSave?.text || dataToSave, // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
          text:
            dataToSave?.text ||
            (typeof dataToSave === "string" ? dataToSave : "N/A"),
        };

        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π
        await handleTelegramMessage(
          this.redisManager,
          server,
          fullTopic,
          telegramEvent
        );
      }
    } catch (error) {
      console.error(
        "‚ùå [MQTT-Receiver] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è:",
        error.message
      );
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ portnum —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async updateDotDataFromPortnum(
    portnum,
    deviceId,
    decodedData,
    additionalInfo = null
  ) {
    try {
      if (portnum === 4 || portnum === "NODEINFO_APP") {
        // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const longName = decodedData.long_name || decodedData.longName;
        const shortName = decodedData.short_name || decodedData.shortName;

        const validLongName =
          longName && isValidUserName(longName) ? longName : "";
        const validShortName =
          shortName && isValidUserName(shortName) ? shortName : "";

        if (validLongName || validShortName) {
          await this.redisManager.updateDotData(
            deviceId,
            {
              longName: validLongName,
              shortName: validShortName,
            },
            additionalInfo
          );
        }
      } else if (portnum === 3 || portnum === "POSITION_APP") {
        // –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        const latitudeI = decodedData.latitude_i || decodedData.latitudeI;
        const longitudeI = decodedData.longitude_i || decodedData.longitudeI;

        if (latitudeI && longitudeI && latitudeI !== 0 && longitudeI !== 0) {
          const latitude = latitudeI / 1e7;
          const longitude = longitudeI / 1e7;

          await this.redisManager.updateDotData(
            deviceId,
            {
              latitude,
              longitude,
            },
            additionalInfo
          );
        }
      }
    } catch (error) {
      const portnumName = this.getPortnumName(portnum);
      console.error(
        `[MQTT-Receiver] Error updating dot data from portnum ${portnum} (${portnumName}):`,
        error.message
      );
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
   */
  async updateDotActivityTime(from, event, server) {
    try {
      await this.redisManager.updateDotData(from, {});
    } catch (error) {
      console.error(
        "[MQTT-Receiver] Error updating dot activity time:",
        error.message
      );
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç
   */
  decrypt(packet) {
    if (!packet?.encrypted || !packet.id || !packet.from) {
      return null;
    }

    if (packet.encrypted.length === 0 || packet.encrypted.length > 65536) {
      return null;
    }

    for (const decryptionKey of DECRYPTION_KEYS) {
      try {
        const key = Buffer.from(decryptionKey, "base64");
        const nonceBuffer = this.createNonce(packet.id, packet.from);

        let algorithm = null;
        if (key.length === 16) {
          algorithm = "aes-128-ctr";
        } else if (key.length === 32) {
          algorithm = "aes-256-ctr";
        } else {
          continue;
        }

        const decipher = crypto.createDecipheriv(algorithm, key, nonceBuffer);
        const decryptedBuffer = Buffer.concat([
          decipher.update(packet.encrypted),
          decipher.final(),
        ]);

        if (decryptedBuffer.length === 0 || decryptedBuffer.length > 65536) {
          continue;
        }

        try {
          return this.protoTypes.Data.decode(decryptedBuffer);
        } catch (decodeError) {
          continue;
        }
      } catch (e) {
        // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
      }
    }

    return null;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç nonce –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
   */
  createNonce(packetId, fromNode) {
    const packetId64 = BigInt(packetId);
    const blockCounter = 0;
    const buf = Buffer.alloc(16);

    buf.writeBigUInt64LE(packetId64, 0);
    buf.writeUInt32LE(fromNode, 8);
    buf.writeUInt32LE(blockCounter, 12);

    return buf;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ portnum –ø–æ –Ω–æ–º–µ—Ä—É
   */
  getPortnumName(portnum) {
    return getPortnumName(portnum) || `UNKNOWN_${portnum}`;
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
   */
  async disconnect() {
    console.log("üëã [MQTT-Receiver] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...");

    try {
      if (this.performanceInterval) {
        clearInterval(this.performanceInterval);
        console.log(
          "‚úÖ [MQTT-Receiver] –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        );
      }

      await this.mqttManager.disconnect();

      if (this.redisManager) {
        await this.redisManager.disconnect();
      }

      // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã Telegram
      cleanupTelegramResources();

      this.protoTypes = {};
    } catch (error) {
      console.error("[MQTT-Receiver] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:", error);
    }
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function main() {
  console.log("üöÄ [MQTT-Receiver] –ó–∞–ø—É—Å–∫ MQTT Receiver —Å–µ—Ä–≤–∏—Å–∞...");

  console.log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${servers.length} —Å–µ—Ä–≤–µ—Ä–∞–º:`);
  servers.forEach((server) => {
    console.log(`  üåê ${server.name} (${server.address})`);
  });

  const receiver = new MqttReceiver();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  const gracefulShutdown = async (signal) => {
    console.log(
      `\nüëã [MQTT-Receiver] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`
    );
    await receiver.disconnect();
    process.exit(0);
  };

  process.on("SIGINT", () => gracefulShutdown("SIGINT"));
  process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  process.on("uncaughtException", (error) => {
    console.error("üö® [MQTT-Receiver] –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï:", error);
    process.exit(1);
  });

  process.on("unhandledRejection", (reason, promise) => {
    console.error(
      "üö® [MQTT-Receiver] –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï –û–¢–ö–õ–û–ù–ï–ù–ò–ï PROMISE:",
      reason
    );
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–µ–º–Ω–∏–∫
  await receiver.init();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID 14259
  try {
    const startupMessage =
      `üöÄ` +
      `${new Date().toLocaleString("ru-RU", {
        timeZone: "Europe/Moscow",
      })}\n`;

    await sendPersonalMessage(14259, startupMessage);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ:", error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    console.error("‚ùå [MQTT-Receiver] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main():");
    console.error("  üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
    console.error("  üìä Stack trace:", error.stack);
    process.exit(1);
  });
}

export default MqttReceiver;
