import Redis from "ioredis";
import {
  executeRedisPipeline,
  isValidUserName,
  CONSTANTS,
  getPortnumName,
} from "./utils.mjs";

const { MAX_METADATA_ITEMS_COUNT, DEVICE_EXPIRY_TIME, MAX_PORTNUM_MESSAGES } =
  CONSTANTS;

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Redis Manager –¥–ª—è MQTT Receiver (—Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å)
 */
export class RedisManager {
  constructor(config) {
    this.redis = new Redis(config);

    this.setupEventHandlers();
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Redis
   */
  setupEventHandlers() {
    this.redis.on("error", (err) => {
      console.error("[MQTT-Receiver] Redis Client Error:", err);
    });

    this.redis.on("connect", () => {
      console.log("‚úÖ [MQTT-Receiver] Connected to Redis");
    });

    this.redis.on("reconnecting", () => {
      console.log("üîÑ [MQTT-Receiver] Reconnecting to Redis...");
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
   */
  async ping() {
    return await this.redis.ping();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ portnum
   * @param {number|string} portnum - –ù–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param {Object} messageData - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async savePortnumMessage(portnum, deviceId, messageData) {
    try {
      const portnumName = getPortnumName(portnum);
      if (!portnumName) {
        console.log(`‚ö†Ô∏è [MQTT-Receiver] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π portnum: ${portnum}`);
        return;
      }

      const key = `${portnumName}:${deviceId}`;
      const messageWithTimestamp = {
        timestamp: Date.now(),
        ...messageData,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
      await this.redis.rpush(key, JSON.stringify(messageWithTimestamp));

      // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö MAX_PORTNUM_MESSAGES —Å–æ–æ–±—â–µ–Ω–∏–π
      await this.redis.ltrim(key, -MAX_PORTNUM_MESSAGES, -1);
    } catch (error) {
      console.error(
        "[MQTT-Receiver] Error saving portnum message:",
        error.message
      );
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (numeric)
   * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   */
  async updateDotData(deviceId, updateData, options = {}) {
    const { portnum = "UNKNOWN" } = options;
    try {
      const key = `dots:${deviceId}`;
      const currentTime = Date.now();

      // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const existingData = await this.redis.hgetall(key);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
      const fieldsToUpdate = {};

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      if (
        updateData.longitude !== undefined ||
        updateData.latitude !== undefined
      ) {
        fieldsToUpdate.longitude = updateData.longitude;
        fieldsToUpdate.latitude = updateData.latitude;
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ node info - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
      if (
        updateData.longName !== undefined ||
        updateData.shortName !== undefined
      ) {
        if (updateData.longName !== undefined) {
          const validLongName =
            updateData.longName && isValidUserName(updateData.longName)
              ? updateData.longName
              : "";
          fieldsToUpdate.longName = validLongName;
        }
        if (updateData.shortName !== undefined) {
          const validShortName =
            updateData.shortName && isValidUserName(updateData.shortName)
              ? updateData.shortName
              : "";
          fieldsToUpdate.shortName = validShortName;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ MQTT
      if (options && options.gatewayId && options.rawDataId) {
        const isMqttDevice = options.gatewayId === options.rawDataId;
        fieldsToUpdate.mqtt = isMqttDevice ? "1" : "0";
      }

      // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
      fieldsToUpdate.s_time = currentTime;

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª—è–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏
      const mergedData = {
        ...existingData,
        ...fieldsToUpdate,
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const dotData = this._filterDotData(mergedData, currentTime);

      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
      if (!dotData) {
        const existingKeys = Object.keys(existingData);
        if (existingKeys.length > 0) {
          await this.redis.del(key);

          // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
          await this.removeFromDeviceIndex(deviceId);
          // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ portnum —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω
          if (portnum && portnum !== "UNKNOWN") {
            await this.removeFromPortnumIndex(deviceId, portnum);
          }
        }
        return;
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Redis
      const redisData = {};
      Object.entries(dotData).forEach(([key, value]) => {
        if (typeof value === "object" && value !== null) {
          redisData[key] = JSON.stringify(value);
        } else {
          redisData[key] = String(value);
        }
      });

      await this.redis.hset(key, redisData);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
      await this.updateDeviceIndex(deviceId);
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–¥–µ–∫—Å portnum —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω
      if (portnum && portnum !== "UNKNOWN") {
        await this.updatePortnumIndex(deviceId, portnum);
      }
    } catch (error) {
      console.error(
        `[MQTT-Receiver] Error updating dot data for ${deviceId}:`,
        error.message
      );
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è dots
   * @param {Object} data - –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @param {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
   * @returns {Object|null} - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null
   */
  _filterDotData(data, timestamp = null) {
    const currentTime = timestamp || Date.now();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    const allowedFields = [
      "longName",
      "shortName",
      "longitude",
      "latitude",
      "mqtt",
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    const filteredData = {};
    Object.entries(data).forEach(([key, value]) => {
      if (
        allowedFields.includes(key) &&
        value !== undefined &&
        value !== null
      ) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (key === "longitude" || key === "latitude") {
          const numValue = parseFloat(value);
          if (!isNaN(numValue)) {
            filteredData[key] = numValue;
          }
        } else {
          filteredData[key] = value;
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∏–º–µ–Ω–∏
    const hasLocation =
      typeof filteredData.longitude === "number" &&
      typeof filteredData.latitude === "number" &&
      filteredData.longitude !== 0 &&
      filteredData.latitude !== 0;

    const hasName =
      (filteredData.longName &&
        typeof filteredData.longName === "string" &&
        filteredData.longName.trim() !== "" &&
        isValidUserName(filteredData.longName)) ||
      (filteredData.shortName &&
        typeof filteredData.shortName === "string" &&
        filteredData.shortName.trim() !== "" &&
        isValidUserName(filteredData.shortName));

    // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ª–∏–±–æ –∏–º—è
    const hasValidData = hasLocation || hasName;

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (!hasValidData) {
      return null;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const result = {
      longName: filteredData.longName || "",
      shortName: filteredData.shortName || "",
      longitude: filteredData.longitude || 0,
      latitude: filteredData.latitude || 0,
      mqtt: filteredData.mqtt || "",
      s_time: currentTime,
    };

    return result;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async updateDeviceIndex(deviceId) {
    try {
      await this.redis.sadd("devices:active", deviceId);
    } catch (error) {
      console.error(
        `[MQTT-Receiver] Error updating device index for ${deviceId}:`,
        error.message
      );
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async removeFromDeviceIndex(deviceId) {
    try {
      await this.redis.srem("devices:active", deviceId);
    } catch (error) {
      console.error(
        `[MQTT-Receiver] Error removing device from index ${deviceId}:`,
        error.message
      );
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param {string} portnum - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async updatePortnumIndex(deviceId, portnum) {
    try {
      await this.redis.sadd(`w:${portnum}`, deviceId);
    } catch (error) {
      console.error(
        `[MQTT-Receiver] Error updating portnum index for ${deviceId}:${portnum}:`,
        error.message
      );
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param {string} portnum - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async removeFromPortnumIndex(deviceId, portnum) {
    try {
      await this.redis.srem(`portnums:${portnum}`, deviceId);
    } catch (error) {
      console.error(
        `[MQTT-Receiver] Error removing device from portnum index ${deviceId}:${portnum}:`,
        error.message
      );
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç Redis
   */
  async disconnect() {
    try {
      await this.redis.quit();
      console.log("‚úÖ [MQTT-Receiver] Redis –æ—Ç–∫–ª—é—á–µ–Ω");
    } catch (error) {
      console.error(
        "[MQTT-Receiver] Error disconnecting from Redis:",
        error.message
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ portnum (–¥–ª—è Telegram –±–æ—Ç–∞)
   * @param {string} portnumName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞
   * @param {number} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param {number} limit - –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async getPortnumMessages(portnumName, deviceId, limit = 10) {
    try {
      const key = `${portnumName}:${deviceId}`;
      const data = await this.redis.lrange(key, -limit, -1);

      const result = data
        .map((item) => {
          try {
            return JSON.parse(item);
          } catch {
            return null;
          }
        })
        .filter(Boolean)
        .reverse(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º

      return result;
    } catch (error) {
      console.error(
        `[MQTT-Receiver] Error getting portnum messages for ${portnumName}:${deviceId}:`,
        error.message
      );
      return [];
    }
  }
}

export default RedisManager;
