import Redis from "ioredis";
import {
  executeRedisPipeline,
  createDeviceDataBatch,
  filterExpiredDevices,
  CONSTANTS,
  getPortnumName,
} from "./utils.mjs";

const { MAX_METADATA_ITEMS_COUNT, DEVICE_EXPIRY_TIME, MAX_PORTNUM_MESSAGES } =
  CONSTANTS;

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Redis Manager —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 *
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞ dots:${deviceId}:
 * - longName - –î–ª–∏–Ω–Ω–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è)
 * - shortName - –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è)
 * - longitude - –î–æ–ª–≥–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è)
 * - latitude - –®–∏—Ä–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è)
 * - s_time - –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 * - mqtt - –§–ª–∞–≥ MQTT (1 - MQTT gateway)
 *
 * –ü—Ä–∞–≤–∏–ª–æ: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∏–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ª–∏–±–æ –∏–º—è. –ü–∞–∫–µ—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Ä–∞–∑–¥–µ–ª—å–Ω–æ.
 * –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –∏–º–µ–Ω–∏ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ dots:.
 */
export class RedisManager {
  constructor(config) {
    this.redis = new Redis({
      ...config,
      // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      host: process.env.REDIS_HOST || config.host || "localhost",
      port: process.env.REDIS_PORT || config.port || 6379,
    });
    this.isQuerying = false;
    this.queryLock = new Map();

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.deviceIndexKey = "devices:active";
    this.portnumIndexPrefix = "portnums:";
    this.indexCache = new Map();
    this.indexCacheTTL = 10000; // 10 —Å–µ–∫—É–Ω–¥

    this.setupEventHandlers();
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Redis
   */
  setupEventHandlers() {
    this.redis.on("error", (err) => {
      console.error("[HTTP-API] Redis Client Error:", err);
    });

    this.redis.on("connect", () => {
      console.log("‚úÖ [HTTP-API] Connected to Redis");
    });

    this.redis.on("reconnecting", () => {
      console.log("üîÑ [HTTP-API] Reconnecting to Redis...");
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
   */
  async ping() {
    return await this.redis.ping();
  }

  // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ portnum —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ mqtt-receiver —Å–µ—Ä–≤–∏—Å–µ

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ portnum –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param {string} portnumName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ça
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @param {number} limit - –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async getPortnumMessages(
    portnumName,
    deviceId,
    limit = MAX_PORTNUM_MESSAGES
  ) {
    try {
      const key = `${portnumName}:${deviceId}`;
      const data = await this.redis.lrange(key, -limit, -1);

      const result = data
        .map((item) => {
          try {
            return JSON.parse(item);
          } catch {
            return null;
          }
        })
        .filter(Boolean)
        .reverse(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º

      return result;
    } catch (error) {
      console.error(
        `Error getting portnum messages for ${portnumName}:${deviceId}:`,
        error.message
      );
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   * @param {string} portnumName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ça
   * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
   */
  async getAllPortnumMessages(portnumName) {
    try {
      const pattern = `${portnumName}:*`;
      const keys = await this.redis.keys(pattern);

      if (keys.length === 0) {
        return {};
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const operations = keys.map((key) => ({
        command: "lrange",
        args: [key, -MAX_PORTNUM_MESSAGES, -1],
      }));

      const results = await executeRedisPipeline(this.redis, operations);

      const allMessages = {};
      keys.forEach((key, index) => {
        const deviceId = key.split(":")[1];
        const messages = results[index]
          .map((item) => {
            try {
              return JSON.parse(item);
            } catch {
              return null;
            }
          })
          .filter(Boolean)
          .reverse(); // –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º

        if (messages.length > 0) {
          allMessages[deviceId] = messages;
        }
      });

      return allMessages;
    } catch (error) {
      console.error(
        `Error getting all portnum messages for ${portnumName}:`,
        error.message
      );
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ portnum
   * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async getPortnumStats() {
    try {
      const stats = {};
      const portnumNames = [
        "TEXT_MESSAGE_APP",
        "POSITION_APP",
        "NODEINFO_APP",
        "TELEMETRY_APP",
        "NEIGHBORINFO_APP",
        "WAYPOINT_APP",
        "MAP_REPORT_APP",
        "TRACEROUTE_APP",
      ];

      for (const portnumName of portnumNames) {
        const pattern = `${portnumName}:*`;
        const keys = await this.redis.keys(pattern);

        stats[portnumName] = {
          deviceCount: keys.length,
          totalMessages: 0,
        };

        if (keys.length > 0) {
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
          const operations = keys.map((key) => ({
            command: "llen",
            args: [key],
          }));

          const lengths = await executeRedisPipeline(this.redis, operations);
          stats[portnumName].totalMessages = lengths.reduce(
            (sum, len) => sum + len,
            0
          );
        }
      }

      return stats;
    } catch (error) {
      console.error("Error getting portnum stats:", error.message);
      return {};
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ Redis
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ hex (!015ba416) –∏–ª–∏ numeric (22782998) —Ñ–æ—Ä–º–∞—Ç–µ
   * @returns {number} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
   */
  async deleteAllDeviceData(deviceId) {
    try {
      let hexId, numericId;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
      if (deviceId.startsWith("!")) {
        // Hex —Ñ–æ—Ä–º–∞—Ç: !015ba416
        hexId = deviceId;
        numericId = parseInt(deviceId.substring(1), 16).toString();
      } else {
        // Numeric —Ñ–æ—Ä–º–∞—Ç: 22782998
        numericId = deviceId;
        hexId = `!${parseInt(deviceId).toString(16).padStart(8, "0")}`;
      }

      console.log(
        `üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${hexId} (${numericId})`
      );

      // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞)
      const keyPatterns = [
        // –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ (–ø–æ portnum)
        `TEXT_MESSAGE_APP:${numericId}`,
        `POSITION_APP:${numericId}`,
        `NODEINFO_APP:${numericId}`,
        `TELEMETRY_APP:${numericId}`,
        `NEIGHBORINFO_APP:${numericId}`,
        `WAYPOINT_APP:${numericId}`,
        `MAP_REPORT_APP:${numericId}`,
        `TRACEROUTE_APP:${numericId}`,

        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
        `dots:${numericId}`,
      ];

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const keysToDelete = [];

      for (const pattern of keyPatterns) {
        const exists = await this.redis.exists(pattern);
        if (exists) {
          keysToDelete.push(pattern);
        }
      }

      // –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏)
      const additionalPatterns = [`*:${numericId}`, `*:${hexId}`];

      for (const pattern of additionalPatterns) {
        try {
          const keys = await this.redis.keys(pattern);
          for (const key of keys) {
            if (!keysToDelete.includes(key)) {
              keysToDelete.push(key);
            }
          }
        } catch (error) {
          console.warn(
            `Warning: couldn't search pattern ${pattern}: ${error.message}`
          );
        }
      }

      // –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
      let deletedCount = 0;
      if (keysToDelete.length > 0) {
        deletedCount = await this.redis.del(...keysToDelete);
        console.log(
          `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –∫–ª—é—á–µ–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${hexId}:`,
          keysToDelete
        );
      } else {
        console.log(`‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${hexId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }

      return deletedCount;
    } catch (error) {
      console.error(
        `Error deleting device data for ${deviceId}:`,
        error.message
      );
      throw error;
    }
  }

  // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ mqtt-receiver —Å–µ—Ä–≤–∏—Å–µ

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–∫–∏
   * @param {Object} parsedData - –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   * @returns {Object} - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  _createStandardDotData(parsedData, deviceId) {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const normalizedData = {
      longName: parsedData.longName || parsedData["Long Name"] || "",
      shortName: parsedData.shortName || parsedData["Short Name"] || "",
      longitude: parsedData.longitude || 0,
      latitude: parsedData.latitude || 0,
      s_time: parsedData.s_time || 0,
      mqtt: parsedData.mqtt || "",
    };

    const result = this._filterDotData(normalizedData, parsedData.s_time || 0);

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (!result) {
      return null;
    }

    return result;
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è dots
   * @param {Object} data - –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @param {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
   * @returns {Object|null} - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
   */
  _filterDotData(data, timestamp = null) {
    const currentTime = timestamp || Date.now();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    const allowedFields = [
      "longName",
      "shortName",
      "longitude",
      "latitude",
      "mqtt",
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    const filteredData = {};
    Object.entries(data).forEach(([key, value]) => {
      if (
        allowedFields.includes(key) &&
        value !== undefined &&
        value !== null
      ) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (key === "longitude" || key === "latitude") {
          const numValue = parseFloat(value);
          if (!isNaN(numValue)) {
            filteredData[key] = numValue;
          }
        } else {
          // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
          filteredData[key] = value;
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∏–º–µ–Ω–∏
    const hasLocation =
      typeof filteredData.longitude === "number" &&
      typeof filteredData.latitude === "number" &&
      filteredData.longitude !== 0 &&
      filteredData.latitude !== 0;

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    const hasName =
      (filteredData.longName &&
        typeof filteredData.longName === "string" &&
        filteredData.longName.trim() !== "" &&
        filteredData.longName) ||
      (filteredData.shortName &&
        typeof filteredData.shortName === "string" &&
        filteredData.shortName.trim() !== "" &&
        filteredData.shortName);

    // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ª–∏–±–æ –∏–º—è
    const hasValidData = hasLocation || hasName;

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (!hasValidData) {
      return null;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const result = {
      longName: filteredData.longName || "",
      shortName: filteredData.shortName || "",
      longitude: filteredData.longitude || 0,
      latitude: filteredData.latitude || 0,
      mqtt: filteredData.mqtt || "",
      s_time: currentTime,
    };

    return result;
  }

  // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ mqtt-receiver —Å–µ—Ä–≤–∏—Å–µ

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
   * @param {string} deviceId - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (numeric)
   * @returns {Object} - –î–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
   */
  async getDotData(deviceId) {
    try {
      const key = `dots:${deviceId}`;
      const data = await this.redis.hgetall(key);

      if (!data || Object.keys(data).length === 0) {
        return null;
      }

      // –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      const parsedData = {};
      Object.entries(data).forEach(([key, value]) => {
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
          parsedData[key] = JSON.parse(value);
        } catch {
          // –ï—Å–ª–∏ –Ω–µ JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (–∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞)
          if (!isNaN(value) && value !== "") {
            parsedData[key] = Number(value);
          } else {
            parsedData[key] = value;
          }
        }
      });

      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      const standardData = this._createStandardDotData(parsedData, deviceId);

      return standardData;
    } catch (error) {
      console.error(`Error getting dot data for ${deviceId}:`, error.message);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –¥–ª—è –∫–∞—Ä—Ç—ã
   * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö —Ç–æ—á–µ–∫
   */
  async getAllDotData() {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–º–µ—Å—Ç–æ keys()
      const deviceIds = await this.getActiveDeviceIds();

      if (deviceIds.length === 0) {
        return {};
      }

      const allDots = {};
      const pipeline = this.redis.pipeline();

      deviceIds.forEach((deviceId) => {
        pipeline.hgetall(`dots:${deviceId}`);
      });

      const results = await pipeline.exec();

      deviceIds.forEach((deviceId, index) => {
        const result = results[index];
        if (result && result[1] && Object.keys(result[1]).length > 0) {
          const parsedData = {};

          Object.entries(result[1]).forEach(([field, value]) => {
            try {
              parsedData[field] = JSON.parse(value);
            } catch {
              parsedData[field] = value;
            }
          });

          const standardData = this._createStandardDotData(
            parsedData,
            deviceId
          );
          if (standardData) {
            allDots[deviceId] = standardData;
          }
        }
      });

      return allDots;
    } catch (error) {
      console.error("Error getting all dot data:", error.message);
      return {};
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
   * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   */
  async createDeviceIndex() {
    try {
      const deviceIds = [];
      let cursor = 0;
      const batchSize = 100;

      do {
        const [newCursor, keys] = await this.redis.scan(
          cursor,
          "MATCH",
          "dots:*",
          "COUNT",
          batchSize
        );
        cursor = newCursor;

        if (keys.length > 0) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –∫–ª—é—á–µ–π
          keys.forEach((key) => {
            const deviceId = key.split(":")[1];
            if (deviceId) {
              deviceIds.push(deviceId);
            }
          });
        }
      } while (cursor !== 0);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ Redis SET –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      if (deviceIds.length > 0) {
        await this.redis.del(this.deviceIndexKey);
        await this.redis.sadd(this.deviceIndexKey, ...deviceIds);
        console.log(
          `üìä –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${deviceIds.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`
        );
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
      this.indexCache.clear();

      return deviceIds;
    } catch (error) {
      console.error("Error creating device index:", error.message);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
   * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   */
  async getActiveDeviceIds() {
    const cacheKey = "active_devices";
    const now = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.indexCache.has(cacheKey)) {
      const cached = this.indexCache.get(cacheKey);
      if (now - cached.timestamp < this.indexCacheTTL) {
        return cached.data;
      }
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑ Redis SET
      const deviceIds = await this.redis.smembers(this.deviceIndexKey);

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.indexCache.set(cacheKey, {
        data: deviceIds,
        timestamp: now,
      });

      return deviceIds;
    } catch (error) {
      console.error("Error getting active device IDs:", error.message);
      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      try {
        const pattern = "dots:*";
        const keys = await this.redis.keys(pattern);
        return keys.map((key) => key.replace("dots:", ""));
      } catch (fallbackError) {
        console.error("Fallback method also failed:", fallbackError.message);
        return [];
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {string} portnumName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   */
  async getDevicesByPortnum(portnumName) {
    const cacheKey = `devices_${portnumName}`;
    const now = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.indexCache.has(cacheKey)) {
      const cached = this.indexCache.get(cacheKey);
      if (now - cached.timestamp < this.indexCacheTTL) {
        return cached.data;
      }
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
      const deviceIds = await this.redis.smembers(
        `${this.portnumIndexPrefix}${portnumName}`
      );

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.indexCache.set(cacheKey, {
        data: deviceIds,
        timestamp: now,
      });

      return deviceIds;
    } catch (error) {
      console.error("Error getting devices by portnum:", error.message);
      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
      try {
        const pattern = `${portnumName}:*`;
        const keys = await this.redis.keys(pattern);
        return keys.map((key) => key.split(":")[1]);
      } catch (fallbackError) {
        console.error("Fallback method also failed:", fallbackError.message);
        return [];
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –¥–ª—è –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è)
   */
  async getOptimizedDotData() {
    try {
      const startTime = Date.now();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cacheKey = "optimized_dots_cache";
      const cached = await this.redis.get(cacheKey);

      if (cached) {
        const duration = Date.now() - startTime;
        console.log(`[HTTP-API] Cached dots data retrieved in ${duration}ms`);
        return JSON.parse(cached);
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º SCAN –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π
      const deviceIds = await this.getActiveDeviceIds();

      if (deviceIds.length === 0) {
        return {};
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const pipeline = this.redis.pipeline();

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ pipeline
      deviceIds.forEach((deviceId) => {
        pipeline.hmget(
          `dots:${deviceId}`,
          "longName",
          "shortName",
          "longitude",
          "latitude",
          "s_time",
          "mqtt"
        );
      });

      const results = await pipeline.exec();
      const optimizedDots = {};

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã pipeline
      results.forEach(([err, values], index) => {
        if (err) {
          console.error(
            `Error getting data for device ${deviceIds[index]}:`,
            err
          );
          return;
        }

        const [longName, shortName, longitude, latitude, s_time, mqtt] = values;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∫–∞—Ä—Ç—ã)
        if (longitude && latitude) {
          optimizedDots[deviceIds[index]] = {
            longName: longName || "",
            shortName: shortName || "",
            longitude: parseFloat(longitude),
            latitude: parseFloat(latitude),
            s_time: s_time ? parseInt(s_time) : 0,
            mqtt: mqtt || "",
          };
        }
      });

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
      await this.redis.setex(cacheKey, 30, JSON.stringify(optimizedDots));

      const duration = Date.now() - startTime;
      console.log(
        `[HTTP-API] Optimized dots data retrieved in ${duration}ms for ${
          Object.keys(optimizedDots).length
        } devices`
      );

      return optimizedDots;
    } catch (error) {
      console.error("Error getting optimized dot data:", error.message);
      return {};
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
   */
  async invalidateDotsCache() {
    try {
      await this.redis.del("optimized_dots_cache");
      console.log("[HTTP-API] Dots cache invalidated");
    } catch (error) {
      console.error("[HTTP-API] Error invalidating dots cache:", error.message);
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç Redis
   */
  async disconnect() {
    try {
      await this.redis.quit();
      console.log("‚úÖ Redis –æ—Ç–∫–ª—é—á–µ–Ω");
    } catch (error) {
      console.error("Error disconnecting from Redis:", error.message);
    }
  }
}

export default RedisManager;
