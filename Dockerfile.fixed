FROM node:20-alpine

# Устанавливаем git для обновлений
RUN apk add --no-cache git curl

# Создаем пользователя для безопасности
RUN addgroup -g 1001 -S nodejs && \
    adduser -S meshtastic -u 1001

# Создаем рабочую директорию
WORKDIR /app

# Клонируем репозиторий
RUN git clone https://github.com/kkwestt/meshtasticback.taubetele.com.git .

# Устанавливаем зависимости
RUN npm install

# Копируем конфигурационный файл
COPY config.mjs /app/config.mjs

# Создаем директории для логов
RUN mkdir -p /app/logs && chown -R meshtastic:nodejs /app

# Создаем скрипт для проверки обновлений
RUN echo '#!/bin/sh' > /app/check-updates.sh && \
    echo 'set -e' >> /app/check-updates.sh && \
    echo '' >> /app/check-updates.sh && \
    echo 'echo "Checking for updates from GitHub..."' >> /app/check-updates.sh && \
    echo '' >> /app/check-updates.sh && \
    echo '# Получаем последний коммит из GitHub API' >> /app/check-updates.sh && \
    echo 'LATEST_COMMIT=$(curl -s "https://api.github.com/repos/kkwestt/meshtasticback.taubetele.com/commits/main" | grep '"'"'"sha"'"'"' | head -1 | cut -d'"'"'"'"'"' -f4)' >> /app/check-updates.sh && \
    echo 'CURRENT_COMMIT=$(git rev-parse HEAD)' >> /app/check-updates.sh && \
    echo '' >> /app/check-updates.sh && \
    echo 'if [ "$LATEST_COMMIT" != "$CURRENT_COMMIT" ]; then' >> /app/check-updates.sh && \
    echo '    echo "New version available: $LATEST_COMMIT"' >> /app/check-updates.sh && \
    echo '    echo "Current version: $CURRENT_COMMIT"' >> /app/check-updates.sh && \
    echo '    ' >> /app/check-updates.sh && \
    echo '    # Создаем файл-флаг для перезапуска' >> /app/check-updates.sh && \
    echo '    touch /tmp/update-required' >> /app/check-updates.sh && \
    echo '    ' >> /app/check-updates.sh && \
    echo '    # Обновляем код' >> /app/check-updates.sh && \
    echo '    git fetch origin' >> /app/check-updates.sh && \
    echo '    git reset --hard origin/main' >> /app/check-updates.sh && \
    echo '    ' >> /app/check-updates.sh && \
    echo '    # Обновляем зависимости если изменился package.json' >> /app/check-updates.sh && \
    echo '    if git diff HEAD@{1} --name-only | grep -q "package.json"; then' >> /app/check-updates.sh && \
    echo '        echo "package.json changed, updating dependencies..."' >> /app/check-updates.sh && \
    echo '        npm install' >> /app/check-updates.sh && \
    echo '    fi' >> /app/check-updates.sh && \
    echo '    ' >> /app/check-updates.sh && \
    echo '    echo "Update completed, restart required"' >> /app/check-updates.sh && \
    echo 'else' >> /app/check-updates.sh && \
    echo '    echo "Already up to date"' >> /app/check-updates.sh && \
    echo 'fi' >> /app/check-updates.sh && \
    chmod +x /app/check-updates.sh

# Создаем основной скрипт запуска
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'set -e' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'echo "Starting Meshtastic Monitor..."' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Функция для graceful shutdown' >> /app/start.sh && \
    echo 'cleanup() {' >> /app/start.sh && \
    echo '    echo "Shutting down..."' >> /app/start.sh && \
    echo '    kill $APP_PID 2>/dev/null || true' >> /app/start.sh && \
    echo '    wait $APP_PID 2>/dev/null || true' >> /app/start.sh && \
    echo '    exit 0' >> /app/start.sh && \
    echo '}' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'trap cleanup SIGTERM SIGINT' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Запускаем приложение' >> /app/start.sh && \
    echo 'while true; do' >> /app/start.sh && \
    echo '    echo "Starting application..."' >> /app/start.sh && \
    echo '    node index.mjs &' >> /app/start.sh && \
    echo '    APP_PID=$!' >> /app/start.sh && \
    echo '    ' >> /app/start.sh && \
    echo '    # Ждем либо завершения приложения, либо сигнала обновления' >> /app/start.sh && \
    echo '    while kill -0 $APP_PID 2>/dev/null; do' >> /app/start.sh && \
    echo '        # Проверяем обновления каждые 5 минут' >> /app/start.sh && \
    echo '        sleep 300' >> /app/start.sh && \
    echo '        /app/check-updates.sh' >> /app/start.sh && \
    echo '        ' >> /app/start.sh && \
    echo '        # Если требуется обновление, перезапускаем' >> /app/start.sh && \
    echo '        if [ -f /tmp/update-required ]; then' >> /app/start.sh && \
    echo '            echo "Restarting due to update..."' >> /app/start.sh && \
    echo '            kill $APP_PID 2>/dev/null || true' >> /app/start.sh && \
    echo '            wait $APP_PID 2>/dev/null || true' >> /app/start.sh && \
    echo '            rm -f /tmp/update-required' >> /app/start.sh && \
    echo '            break' >> /app/start.sh && \
    echo '        fi' >> /app/start.sh && \
    echo '    done' >> /app/start.sh && \
    echo '    ' >> /app/start.sh && \
    echo '    # Если приложение упало, ждем немного перед перезапуском' >> /app/start.sh && \
    echo '    if ! kill -0 $APP_PID 2>/dev/null; then' >> /app/start.sh && \
    echo '        echo "Application crashed, restarting in 10 seconds..."' >> /app/start.sh && \
    echo '        sleep 10' >> /app/start.sh && \
    echo '    fi' >> /app/start.sh && \
    echo 'done' >> /app/start.sh && \
    chmod +x /app/start.sh

# Создаем healthcheck скрипт
RUN echo '#!/bin/sh' > /app/healthcheck.sh && \
    echo '# Простая проверка что процесс запущен' >> /app/healthcheck.sh && \
    echo 'pgrep -f "node index.mjs" > /dev/null || exit 1' >> /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

# Переключаемся на непривилегированного пользователя
USER meshtastic

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /app/healthcheck.sh

# Запускаем приложение
CMD ["/app/start.sh"]
